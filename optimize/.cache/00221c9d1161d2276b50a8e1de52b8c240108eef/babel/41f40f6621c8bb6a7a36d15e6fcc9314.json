{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/listen/listen.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/listen/listen.js","mtime":1526650528303},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\n_modules.uiModules.get('kibana').run(function ($rootScope) {\n\n  /**\n   * Helper that registers an event listener, and removes that listener when\n   * the $scope is destroyed.\n   *\n   * @param  {EventEmitter} emitter - the event emitter to listen to\n   * @param  {string} eventName - the event name\n   * @param  {Function} handler - the event handler\n   * @return {undefined}\n   */\n  $rootScope.constructor.prototype.$listen = function (emitter, eventName, handler) {\n    emitter.on(eventName, handler);\n    this.$on('$destroy', function () {\n      emitter.off(eventName, handler);\n    });\n  };\n});",null]}