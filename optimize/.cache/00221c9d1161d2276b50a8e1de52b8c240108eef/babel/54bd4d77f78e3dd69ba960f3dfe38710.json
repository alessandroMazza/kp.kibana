{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/plugins/json_xml_formatter/public/jsonXMLFormatter.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/plugins/json_xml_formatter/public/jsonXMLFormatter.js","mtime":1528105208782},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _field_formats = require('../../../src/ui/public/registry/field_formats');\n\nvar _field_format = require('../../../src/ui/field_formats/field_format');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n_field_formats.RegistryFieldFormatsProvider.register(stringifyJson);\n\n//import format from 'xml-formatter';\n//import pd from 'pretty-data';\n\nfunction formatXml(xml) {\n    var formatted = '';\n    var reg = /(>)(<)(\\/*)/g;\n    xml = xml.replace(reg, '$1\\r\\n$2$3');\n    var pad = 0;\n    jQuery.each(xml.split('\\r\\n'), function (index, node) {\n        var indent = 0;\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        } else if (node.match(/^<\\/\\w/)) {\n            if (pad != 0) {\n                pad -= 1;\n            }\n        } else if (node.match(/^<\\w([^>]*[^\\/])?>.*$/)) {\n            indent = 1;\n        } else {\n            indent = 0;\n        }\n\n        var padding = '';\n        for (var i = 0; i < pad; i++) {\n            padding += '  ';\n        }\n\n        formatted += padding + node + '\\r\\n';\n        pad += indent;\n    });\n\n    return formatted;\n}\n\nfunction stringifyJson(Private) {\n    var jsonXMLFormat = function (_FieldFormat) {\n        _inherits(jsonXMLFormat, _FieldFormat);\n\n        function jsonXMLFormat(params) {\n            _classCallCheck(this, jsonXMLFormat);\n\n            var _this = _possibleConstructorReturn(this, (jsonXMLFormat.__proto__ || Object.getPrototypeOf(jsonXMLFormat)).call(this, params));\n\n            _this._convert = {\n                text: function text(value) {\n                    return value;\n                },\n\n                html: function html(value) {\n                    if (value == null) return '-';\n                    if (value.startsWith(\"{\") == true) {\n                        var jsonPretty = JSON.stringify(JSON.parse(value), null, 2);\n                        //var html = '<pre>' + jsonPretty + '</pre>';\n                        //var html = '<div id=\"custom_div\">' + xml_escaped + '</div>';\n                        var html = '<div>' + jsonPretty + '</div>';\n                        return html;\n                    }\n                    if (value.startsWith(\"<\") == true) {\n\n                        var xml_formatted = formatXml(value);\n                        var xml_escaped = xml_formatted.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/ /g, '&nbsp;');\n\n                        //var html = '<pre>' + xml_escaped + '</pre>';\n                        //var html = '<pre id=\"custom_pre\">' + xml_escaped + '</pre>';\n                        //var html = '<div id=\"custom_div\">' + xml_escaped + '</div>';\n                        var html = '<div>' + xml_escaped + '</div>';\n                        return html;\n                    }\n                    return value;\n                }\n            };\n            return _this;\n        }\n\n        return jsonXMLFormat;\n    }(_field_format.FieldFormat);\n\n    jsonXMLFormat.id = 'jsonXMLFormat';\n    jsonXMLFormat.title = 'Json-XML';\n    jsonXMLFormat.fieldType = ['string'];\n\n\n    return jsonXMLFormat;\n}",null]}