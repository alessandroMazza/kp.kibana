{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_group.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_group.js","mtime":1528705437621},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _kp_custom_filter_group_bar = require('ui/kp_custom_filter_group_bar/kp_custom_filter_group_bar.html');\n\nvar _kp_custom_filter_group_bar2 = _interopRequireDefault(_kp_custom_filter_group_bar);\n\nrequire('ui/directives/json_input');\n\nvar _filter_applied_and_unwrap = require('ui/filter_bar/lib/filter_applied_and_unwrap');\n\nvar _map_and_flatten_filters = require('ui/filter_bar/lib/map_and_flatten_filters');\n\nvar _map_flatten_and_wrap_filters = require('ui/filter_bar/lib/map_flatten_and_wrap_filters');\n\nvar _extract_time_filter = require('ui/filter_bar/lib/extract_time_filter');\n\nvar _filter_out_time_based_filter = require('ui/filter_bar/lib/filter_out_time_based_filter');\n\nvar _change_time_filter = require('ui/filter_bar/lib/change_time_filter');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _compare_filters = require('../filter_bar/lib/compare_filters');\n\nvar _modules = require('ui/modules');\n\nrequire('./kp_custom_filter_editor');\n\nvar _kp_custom_filter_Group_utilities = require('./kp_custom_filter_Group_utilities');\n\nrequire('./style/custom_filters_form.css');\n\nrequire('angular-ui-select');\n\nvar _filter_editor_utils = require('../filter_editor/lib/filter_editor_utils');\n\nrequire('../directives/ui_select_focus_on');\n\nrequire('../filters/sort_prefix_first');\n\nvar _stream = require('stream');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.module = _module;\n\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('customFilters', function (Private, Promise, getAppState, fixedFilters, dashboardNavigationState, indexPatterns, globalState, $http) {\n  var mapAndFlattenFilters = Private(_map_and_flatten_filters.FilterBarLibMapAndFlattenFiltersProvider);\n  var mapFlattenAndWrapFilters = Private(_map_flatten_and_wrap_filters.FilterBarLibMapFlattenAndWrapFiltersProvider);\n  var extractTimeFilter = Private(_extract_time_filter.FilterBarLibExtractTimeFilterProvider);\n  var filterOutTimeBasedFilter = Private(_filter_out_time_based_filter.FilterBarLibFilterOutTimeBasedFilterProvider);\n  var changeTimeFilter = Private(_change_time_filter.FilterBarLibChangeTimeFilterProvider);\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n\n  return {\n    template: _kp_custom_filter_group_bar2.default,\n    restrict: 'E',\n    scope: {\n      indexPatterns: '='\n    },\n    link: function link($scope) {\n      // bind query filter actions to the scope\n      ['addFilters', 'toggleFilter', 'toggleAll', 'pinFilter', 'pinAll', 'invertFilter', 'invertAll', 'removeFilter', 'removeAll'].forEach(function (method) {\n        $scope[method] = queryFilter[method];\n      });\n\n      function isVisibleInThisDashboard(filterData) {\n        var locTag = getAppState().title;\n        var locGroup = getAppState().current_group;\n        var groupsToBeReturned = [];\n        filterData.forEach(function (filterGroup) {\n          var dahboardsToBeReturned = [];\n          filterGroup.forEach(function (filter) {\n            var visibilityDash = filter.filter.visibility.dashboard_name;\n            var visibilityGroups = filter.filter.visibility.group_name;\n            var isVisible = false;\n            if (!Array.isArray(visibilityDash)) {\n              visibilityDash = [visibility];\n            }\n            if (!Array.isArray(visibilityGroups)) {\n              visibilityGroups = [visibilityGroups];\n            }\n\n            visibilityDash.some(function (dashName) {\n              if (dashName === locTag) {\n                isVisible = true;\n                return true;\n              }\n            });\n            visibilityGroups.some(function (grupName) {\n              if (grupName === locGroup) {\n                isVisible = true;\n                return true;\n              }\n            });\n            if (isVisible === true) {\n              dahboardsToBeReturned.push(filter);\n            }\n          });\n          if (dahboardsToBeReturned.length > 0) {\n            groupsToBeReturned.push(dahboardsToBeReturned);\n          }\n        });\n        return groupsToBeReturned;\n      }\n\n      $scope.state = getAppState();\n      $scope.resp = false;\n\n      var filterData = $scope.resp;\n\n      function extractFilters(filterArray, filterDataOrganizer) {\n        if (filterArray) {\n          $scope.filterArr = filterArray.hits.map(function (filter) {\n            return filter._source;\n          });\n\n          filterArray = filterArray.hits.map(function (filter, filterDataOrganize) {\n            return filter._source;\n          });\n\n          //Variables for setting the fields to be checked when processing the filters groups.\n\n          var groupIntCheck = [[\"filter\", \"group\", \"groupName\"], [\"filter\", \"group\", \"groupOrder\"]];\n          var groupSortCheck = [[\"filter\", \"group\", \"groupOrder\"], [\"filter\", \"group\", \"orderInGroup\"]];\n          var groupDuplicateCheck = [[\"filter\", \"field_name\"], [\"filter\", \"group\", \"groupName\"]];\n\n          var filtersGroupProcesser = filterDataOrganizer();\n          filtersGroupProcesser.setParameters(filterArray, groupIntCheck, groupSortCheck, groupDuplicateCheck);\n          return filtersGroupProcesser.processFilters();\n        }\n      }\n\n      function getCustomFilterJson(indexAndType) {\n\n        var indexName = indexAndType.split(\"/\")[0];\n        var indexType = indexAndType.split(\"/\")[1];\n        $scope.organizer = _kp_custom_filter_Group_utilities.filterDataOrganizer;\n\n        var query = {\n          query: { match_all: {}\n          }\n        };\n\n        var params = {\n          index: indexName,\n          type: indexType,\n          body: query\n        };\n\n        return $http({\n          method: 'POST',\n          url: '../api/console/proxy?path=/' + indexName + '/' + indexType + '/' + '_search&method=POST',\n          data: query\n        }).then(function Success(response) {\n          var response = response.data.hits;\n          $scope.resp = response;\n          $scope.filterGroups = isVisibleInThisDashboard(extractFilters($scope.resp, $scope.organizer));\n        }, function Error(response) {\n          $scope.resp = \"Error\";\n        });\n      }\n\n      function getConf() {\n        var confProm = $http({\n          method: 'GET',\n          url: '../api/kibana/configurations'\n        }).then(function (response) {\n          var data = response.data;\n          getCustomFilterJson(data);\n        });\n      }\n\n      var customFiltersData = getConf();\n\n      //Interception section  \n\n      $scope.$on('a_form_was_opened_or_closed', function (event, data) {\n        $scope.$broadcast('is_a_form_open', data);\n      });\n\n      //$scope.fieldOptions = getFieldOptions(indexPatterns);\n\n      //temporary chain of functions \n    }\n  };\n});",null]}