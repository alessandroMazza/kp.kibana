{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_editor.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_editor.js","mtime":1528556903438},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _kp_custom_filter_editor = require('./kp_custom_filter_editor.html');\n\nvar _kp_custom_filter_editor2 = _interopRequireDefault(_kp_custom_filter_editor);\n\nrequire('./style/custom_filters_form.css');\n\nvar _kp_custom_filter_Group_utilities = require('./kp_custom_filter_Group_utilities');\n\nrequire('./kp_custom_single_filter_bar');\n\nrequire('../filter_editor/lib/filter_editor_utils');\n\nrequire('../filter_editor/lib/filter_operators');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n_module.directive('kpFilterEditor', function () {\n  return {\n    restrict: 'E',\n    template: _kp_custom_filter_editor2.default,\n    scope: {\n      filters: '=',\n      indexPatterns: \"=\"\n    },\n    bindToController: true,\n    controllerAs: 'kpfilters',\n    controller: function kpCustomFiltersController($scope, indexPatterns) {\n\n      var filterOrganizer = (0, _kp_custom_filter_Group_utilities.filterDataOrganizer)();\n      var thisController = this;\n      this.activeFilterFields = [];\n\n      $scope.selected = false;\n      $scope.onlyOneSelected = false;\n\n      $scope.$on('is_a_form_open', function (event, data) {\n        $scope.onlyOneSelected = data;\n      });\n\n      $scope.toggle_selected = function (selected, boolVal) {\n        if (!boolVal) {\n          $scope.selected = boolVal;\n          $scope.$emit('a_form_was_opened_or_closed', boolVal);\n        } else if (!$scope.selected && !$scope.onlyOneSelected) {\n          $scope.selected = boolVal;\n          $scope.$emit('a_form_was_opened_or_closed', true);\n        }\n      };\n\n      $scope.indexesIds = null;\n      $scope.indexesTitles = null;\n      $scope.fields = [];\n      $scope.indexPatterns = indexPatterns;\n      $scope.fieldsAndFilters = null;\n      $scope.renderedFilterTag = [];\n\n      (function setIdsAndTitles() {\n        indexPatterns.getTitles().then(function (value) {\n          $scope.indexesTitles = value;\n        });\n        indexPatterns.getIds().then(function (value) {\n          $scope.indexesIds = value;\n          value.forEach(function (val) {\n            indexPatterns.get(val).then(function (response) {\n              response.fields.forEach(function (field) {\n                $scope.fields.push(field);\n              });\n            });\n          });\n        });\n      })();\n\n      $scope.flatFields = function (fieldList) {\n        return [].concat.apply([], fieldList);\n      };\n\n      $scope.checkIfPresentAndUpdateFiltersSelection = function (filterName) {\n        var recoveredFieldsList = $scope.flatFields($scope.fields);\n        var nameList = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        });\n        var indexOfField = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        }).indexOf(filterName);\n        if (!(indexOfField >= 0)) {\n          return false;\n        } else {\n          if (!filterOrganizer.jsonInList(recoveredFieldsList[indexOfField], thisController.activeFilterFields)) {\n            thisController.activeFilterFields.push(recoveredFieldsList[indexOfField]);\n          }\n          return true;\n        }\n      };\n\n      $scope.extractFilterNames = function (filterList) {\n        var namelist = filterList.map(function (filter) {\n          return filter.filter.field_name;\n        });\n        return namelist;\n      };\n\n      $scope.findFilterFields = function (filterList) {\n        var recoveredFieldsList = $scope.flatFields($scope.fields);\n        var activeFieldsList = [];\n        var nameList = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        });\n        filterList.forEach(function (filter) {\n          var filterName = filter.filter.field_name;\n          var indexOfField = nameList.indexOf(filterName);\n          if (indexOfField >= 0) {\n            if (!filterOrganizer.jsonInList(recoveredFieldsList[indexOfField], nameList)) {\n              thisController.activeFilterFields.push(recoveredFieldsList[indexOfField]);\n              activeFieldsList.push([recoveredFieldsList[indexOfField], filter]);\n            }\n          }\n        });\n\n        $scope.fieldsAndFilters = activeFieldsList;\n      };\n\n      //Event handlers\n\n      $scope.$on('a_filter_has_been_rendered', function (event, data) {\n        $scope.$broadcast('is_a_form_open', data);\n        $scope.renderedFilterTag.push(data);\n      });\n    }\n  };\n});",null]}