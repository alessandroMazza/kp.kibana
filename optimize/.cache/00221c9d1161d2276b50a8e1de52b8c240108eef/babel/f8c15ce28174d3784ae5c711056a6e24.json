{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_Group_utilities.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_Group_utilities.js","mtime":1528366935062},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["// Create a object and export only the object, the only methods that should be callable are the ones that are propedeutic for the \n// arrangement of the datas for the custom filter menu\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.filterDataOrganizer = filterDataOrganizer;\n\n\nfunction filterDataOrganizer() {\n\n  // initialization of necessary variables \n\n  var sortingParametersArgs = null;\n\n  var groupGenArgs = null;\n\n  var duplicateArgs = null;\n\n  // set parameters method to be called prior to the  main formatter method.\n\n  function setParams(jsonData, groupCheckHierarchies, sortingHierarchies, duplicateHierarchies) {\n    sortingParametersArgs = generateArgsListsWithData(jsonData, sortingHierarchies, false);\n    groupGenArgs = generateArgsListsWithData(jsonData, groupCheckHierarchies, true);\n    duplicateArgs = generateArgsListsWithData(jsonData, duplicateHierarchies, false);\n  }\n\n  //Various utils private functions.\n\n  function generateArgsListsWithData(arg0, argList, headList) {\n    var argListRet = headList ? [arg0] : [];\n    argList.forEach(function (element) {\n      argListRet.push(element);\n    });\n    return argListRet;\n  }\n\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function compareTwoLists(listOne, listTwo) {\n    var listTwoLength = listTwo.length;\n    var listOneLength = listOne.length;\n    if (listTwoLength != listOneLength) {\n      return false;\n    }\n    for (var i = 0; i < listOneLength; i++) {\n      if (listOne[i] != listTwo[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function checkIfMoreThanOneUniqueByKey(uniqList) {\n    var len = uniqList.length;\n    var nameList = [];\n    var checkList = [];\n    var posList = [];\n    uniqList.forEach(function (element) {\n      nameList.push(element[0]);\n      posList.push(element[1]);\n      checkList.push(element.join(\"\"));\n    });\n    if (nameList.filter(onlyUnique).length != checkList.filter(onlyUnique).length || posList.filter(onlyUnique).length != checkList.filter(onlyUnique).length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function eliminateDuplicateLists(listOfLists) {\n    var nLists = listOfLists.length;\n    var i = 0;\n    var length = nLists;\n    var indexList = [];\n    while (i < length) {\n      var y = 0;\n      while (y < length) {\n        if (compareTwoLists(listOfLists[i], listOfLists[y]) && i != y) {\n          listOfLists.splice(y, 1);\n          indexList.push(y);\n          length -= 1;\n          y -= 1;\n        }\n        y += 1;\n      }\n      i += 1;\n    }\n    return indexList;\n  }\n\n  function createArray(len, itm) {\n    var arr1 = [itm],\n        arr2 = [];\n    while (len > 0) {\n      if (len & 1) arr2 = arr2.concat(arr1);\n      arr1 = arr1.concat(arr1);\n      len >>>= 1;\n    }\n    return arr2;\n  }\n\n  function extractFilters(filterArray) {\n    return filterArray.hits.map(function (filter) {\n      return filter._source.filter;\n    });\n  }\n\n  function checkIfJson(obj) {\n    if (obj.constructor === {}.constructor) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function returnKeysOneLevel(obj) {\n    var keyList = [];\n    for (var key in obj) {\n      keyList.push(key);\n    }\n    return keyList;\n  }\n\n  function returnJsonKeys(obj) {\n    var keyList = [];\n    if (checkIfJson(obj)) {\n      var keyList = returnKeysOneLevel(obj);\n    }\n  }\n\n  function returnLeafObj(obj) {\n    var jsonObj = [];\n    returnKeysOneLevel(obj).forEach(function (element) {\n      if (checkIfJson(obj[element])) {\n        jsonObj.push(obj[element]);\n      }\n    });\n    return jsonObj;\n  }\n\n  /*function jsonDepth(obj) {\n    if (Array.isArray(obj)) {\n      return undefined;\n    }\n    var depth = 0;\n    var leafObjList = [];\n    leafObjList[depth] = returnLeafObj(obj);\n    while (true) {\n      if (leafObjList[depth].length > 0) {\n        depth += 1;\n        leafObjList[depth] = [];\n      } else {\n        return depth + 1;\n      }\n      leafObjList[depth - 1].forEach(function (element) {\n        var tempObjList = returnLeafObj(element);\n        if (tempObjList.length > 0) {\n          tempObjList.forEach(function (subObject) {\n            leafObjList[depth].push(subObject);\n          });\n        }\n      });\n    }\n  }*/\n\n  // function for comparing two arbitratray js objects.\n\n  function jsonEqual(x, y) {\n    if (x instanceof Object && y instanceof Object) {\n      x = JSON.stringify(x);\n      y = JSON.stringify(y);\n    }\n    if (x === y) {\n      return true;\n    }if (!(x instanceof Object) || !(y instanceof Object)) {\n      return false;\n    }if (x.constructor !== y.constructor) {\n      return false;\n    }for (var p in x) {\n      if (!x.hasOwnProperty(p)) continue;\n      if (!y.hasOwnProperty(p)) {\n        return false;\n      }if (x[p] === y[p]) continue;\n      if (_typeof(x[p]) !== \"object\") {\n        return false;\n      }if (!Object.equals(x[p], y[p])) {\n        return false;\n      }\n    }\n    for (p in y) {\n      if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function searchIfJsonIsInList(json, jsonList) {\n    var isInList = false;\n    jsonList.map(function (element) {\n      if (jsonEqual(json, element)) {\n        isInList = true;\n      }\n    });\n    return isInList;\n  }\n\n  //end of general utils functions \n\n\n  //Groups and checks if filters with different values in the same combination of properties are present, if such\n  //a condition presents then an exception is raised.\n\n  function createGroupsTags(filterArray, sortingParam0, sortingParam1) {\n\n    if (filterArray) {\n      var filterGroupingList = [];\n      var uniquesFilterGroupingList = [];\n      var checkGroupingList = [];\n      var filterGroupingListLen = filterArray.length;\n      for (var i = 0; i < filterGroupingListLen; i++) {\n        if (!searchIfJsonIsInList(filterArray[i], uniquesFilterGroupingList)) {\n          uniquesFilterGroupingList.push(filterArray[i]);\n        }\n      }\n      uniquesFilterGroupingList.forEach(function (element) {\n        if (element) {\n          checkGroupingList.push([sortingParametersTreeDesc(element, sortingParam0), sortingParametersTreeDesc(element, sortingParam1)]);\n          filterGroupingList.push(element);\n        }\n      });\n    }\n\n    if (!checkIfMoreThanOneUniqueByKey(checkGroupingList)) {\n      return filterGroupingList;\n    } else {\n      throw \"Groups with different groupName/Order\";\n    }\n  }\n\n  // Extract values of properties given a list containig the path to that property along the branches of the object hierarchycal tree. Es [prop0, prop1, prop2]\n\n  function sortingParametersTreeDesc(element, sortingParameterTree) {\n    var paramTreeDepth = sortingParameterTree.length;\n    var leaf = element;\n    for (var depth = 0; depth < paramTreeDepth; depth++) {\n      leaf = leaf[[sortingParameterTree][0][depth]];\n    }\n    return leaf;\n  }\n\n  //Extract the value of a property from a list of objects, returns a list of values.\n\n  function extractObjectValuesFromList() {\n    var Narg = arguments.length;\n    var args = arguments;\n    var attributeList = [];\n    args[0].map(function (element) {\n      var values = [];\n      for (var narg = 1; narg < Narg; narg++) {\n        if (Array.isArray(args[narg]) && args[narg].length > 0) {\n          values.push(sortingParametersTreeDesc(element, args[narg]));\n        }\n      }\n      if (!(values.filter(onlyUnique).length == 1 && values.filter(onlyUnique)[0] == null)) {\n        attributeList.push(values);\n      }\n    });\n    return attributeList;\n  }\n\n  // Sorts a list of lists of objects based on two sorting parameters. Returns the sorted list of lists. \n\n  function sortUniquesOfGroups(groupArray, sortingParameters0, sortingPArameters1) {\n\n    var paramTreeLevel0 = sortingParameters0; // [\"filter\", \"group\", \"groupOrder\"];\n    var paramTreeLevel1 = sortingPArameters1; //[\"filter\", \"group\", \"orderInGroup\"];\n\n    function sortLevel(groupArray, sortingParameterTree, groupOrNot) {\n\n      var uniquesValuesArraySorted = groupArray.map(function (element) {\n        return sortingParametersTreeDesc(element, sortingParameterTree);\n      }).filter(onlyUnique).sort(function (a, b) {\n        return a - b;\n      });\n      var arrayLength = groupArray.length;\n      var spanLength = uniquesValuesArraySorted.length;\n      var sortedArray = [];\n      for (var i = 0; i < spanLength; i++) {\n        var tempList = [];\n        for (var j = 0; j < arrayLength; j++) {\n          if (sortingParametersTreeDesc(groupArray[j], sortingParameterTree) === uniquesValuesArraySorted[i]) {\n            tempList.push(groupArray[j]);\n          }\n        }\n        sortedArray.push(tempList);\n      }\n      return groupOrNot ? sortedArray : [].concat.apply([], sortedArray);\n    }\n\n    var sortedByGroup = sortLevel(groupArray, paramTreeLevel0, true);\n    var sortedGroupLength = sortedByGroup.length;\n    var levelTwoSortedGroup = [];\n    for (var gru = 0; gru < sortedGroupLength; gru++) {\n      levelTwoSortedGroup.push(sortLevel(sortedByGroup[gru], paramTreeLevel1, false));\n    }\n    return levelTwoSortedGroup; //[].concat.apply([], levelTwoSortedGroup);\n  }\n\n  //Eliminates objects with the same properties values given a specific combination of properties paths. \n\n  function eliminateDuplicateByKeysForList() {\n    var args = Array.prototype.slice.call(arguments);\n    var supArgs = args.slice(1);\n    var argum = null;\n    var retList = [];\n    for (var le = 0; le < args[0].length; le++) {\n      argum = [].concat.apply([], [[args[0][le]], supArgs]);\n      var attributeArray = extractObjectValuesFromList.apply(null, argum);\n      retList.push(attributeArray);\n    }\n\n    var elArgum = [].concat.apply([], [retList, supArgs]);\n    var eliminateArray = eliminateDuplicateLists.apply(null, elArgum);\n    var erArLen = eliminateArray.length;\n    for (var ind = 0; ind < erArLen; ind++) {\n      args[0][0].splice(ind, 1);\n    }\n\n    return args[0];\n  }\n\n  //method for processing the flters list. This  \n\n  function processObjectList() {\n    var filtersGroups = createGroupsTags.apply(null, groupGenArgs);\n    sortingParametersArgs = generateArgsListsWithData(filtersGroups, sortingParametersArgs, true);\n    filtersGroups = sortUniquesOfGroups.apply(null, sortingParametersArgs);\n    duplicateArgs = generateArgsListsWithData(filtersGroups, duplicateArgs, true);\n    filtersGroups = eliminateDuplicateByKeysForList.apply(null, duplicateArgs);\n    return filtersGroups;\n  }\n\n  //exports methods.\n\n  return {\n    setParameters: setParams,\n    processFilters: processObjectList,\n    jsonInList: searchIfJsonIsInList\n  };\n}\n\n//EXAMPLE ON HOW TO USE FUNCTIONS FOR FUTURE MODIFICATIONS.\n\n//extractObjectValuesFromList(filters, [\"filter\", \"field_name\"],[\"filter\", \"type\"], [\"filter\", \"group\", \"groupName\"], [\"filter\", \"group\", \"orderInGroup\"], [\"filter\", \"type\"] );\n\n/*var filtersGroups = createGroupsTags(filters, [\"filter\", \"group\", \"groupName\"], [\"filter\", \"group\", \"groupOrder\"]);\n\nfiltersGroups = sortUniquesOfGroups(filtersGroups, [\"filter\", \"group\", \"groupOrder\"], [\"filter\", \"group\", \"orderInGroup\"]);\n\nfiltersGroups = eliminateDuplicateByKeysForList(filtersGroups,[\"filter\",\"field_name\"], [\"filter\", \"group\", \"groupName\"])\nconsole.log(filtersGroups)*/\n\n/*var test = filterDataOrganizer()\ntest.setParameters(filters,[[\"filter\", \"group\", \"groupName\"], [\"filter\", \"group\", \"groupOrder\"]], [[\"filter\", \"group\", \"groupOrder\"], [\"filter\", \"group\", \"orderInGroup\"]], [[\"filter\",\"field_name\"], [\"filter\", \"group\", \"groupName\"]])\nvar testResults = test.processFilters() \nconsole.log(testResults)*/",null]}