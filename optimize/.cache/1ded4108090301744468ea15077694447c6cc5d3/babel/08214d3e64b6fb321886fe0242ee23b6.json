{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/filter_bar/filter_bar.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/filter_bar/filter_bar.js","mtime":1529318555473},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = exports.toggleFilterDisabled = exports.enableFilter = exports.disableFilter = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _disable_filter = require('./lib/disable_filter');\n\nObject.defineProperty(exports, 'disableFilter', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.disableFilter;\n  }\n});\nObject.defineProperty(exports, 'enableFilter', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.enableFilter;\n  }\n});\nObject.defineProperty(exports, 'toggleFilterDisabled', {\n  enumerable: true,\n  get: function get() {\n    return _disable_filter.toggleFilterDisabled;\n  }\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _filter_bar = require('ui/filter_bar/filter_bar.html');\n\nvar _filter_bar2 = _interopRequireDefault(_filter_bar);\n\nrequire('ui/directives/json_input');\n\nrequire('../filter_editor');\n\nrequire('./filter_pill/filter_pill');\n\nvar _filter_applied_and_unwrap = require('ui/filter_bar/lib/filter_applied_and_unwrap');\n\nvar _map_and_flatten_filters = require('ui/filter_bar/lib/map_and_flatten_filters');\n\nvar _map_flatten_and_wrap_filters = require('ui/filter_bar/lib/map_flatten_and_wrap_filters');\n\nvar _extract_time_filter = require('ui/filter_bar/lib/extract_time_filter');\n\nvar _filter_out_time_based_filter = require('ui/filter_bar/lib/filter_out_time_based_filter');\n\nvar _change_time_filter = require('ui/filter_bar/lib/change_time_filter');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _compare_filters = require('./lib/compare_filters');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.module = _module;\n\n\nvar _module = _modules.uiModules.get('kibana');\n\n//KP fixedFilter service \nvar app = _modules.uiModules.get('app/dashboard', ['elasticsearch', 'ngRoute', 'react', 'kibana/courier', 'kibana/config', 'kibana/notify', 'kibana/typeahead']);\n\napp.service('fixedFilters', function () {\n\n  function isJson(str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  function objIsJson(obj) {\n    try {\n      JSON.stringify(obj);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  function fixedFilter(dashboardName, groupName, query, filter) {\n    if (typeof dashboardName === \"string\" || typeof groupName === \"string\") {\n\n      this.dashboard = dashboardName;\n      this.groupName = groupName;\n      this.globalFilter = false;\n    } else {\n      this.globalFilter = true;\n    }\n    if (_typeof(query === \"string\" && isJson(query))) {\n      this.query = query;\n    } else if (objIsJson(query)) {\n      this.query = JSON.stringify(query);\n    } else {\n      console.log(\"passed a non jsonlike object\");\n    }\n\n    this.filter = filter;\n  }\n\n  function fixedFilterDefault(dashboardName, groupName, query) {\n    if (typeof dashboardName === \"string\" || typeof groupName === \"string\") {\n      this.dashboard = dashboardName;\n      this.groupName = groupName;\n      this.globalFilter = false;\n    } else {\n      this.globalFilter = true;\n    }\n    if (_typeof(query === \"string\" && isJson(query))) {\n      this.query = query;\n    } else if (objIsJson(query)) {\n      this.query = JSON.stringify(query);\n    } else {\n      console.log(\"passed a non jsonlike object\");\n    }\n  }\n\n  //KP_fixedFilters_Configuration\n  var fixedFiltersList = [];\n  /*var numberOfFixedFilters = fixedFiltersList.length;\n  var MEPKEYWORDSYNC = '{\"match\":{\"MEP\":{\"query\":\"SYNC\",\"type\":\"phrase\"}}}';\n  var MEPKEYWORDASYNC = '{\"match\":{\"MEP\":{\"query\":\"ASYNC\",\"type\":\"phrase\"}}}'\n  var MEPKEYWORDSYNCFILTER = new fixedFilterDefault(\"SERVICES_Services Overview_0\",\"SERVICES\",MEPKEYWORDSYNC, undefined);\n  var MEPKEYWORDASYNCFILTER = new fixedFilterDefault(\" INTEGRATIONS_Integrations Overview_0\",\"INTEGRATIONS\",MEPKEYWORDASYNC, undefined);*/\n  var defaultFixedFilters = [];\n\n  //TO SWITCH INSIDE A CONFIGURATION \n  this.getDefaultFixedFilters = function () {\n    return defaultFixedFilters;\n  };\n\n  this.getFixedFiltersList = function () {\n    return fixedFiltersList;\n  };\n\n  this.GetSpecificGroupOrDashFilters = function (groupNameOrDashName) {\n    if (typeof groupNameOrDashName === \"string\") {\n      var toReturnList = [];\n      fixedFiltersList.map(function (filter) {\n        if (filter.dashboard === groupNameOrDashName || filter.groupName === groupNameOrDashName) {\n          toReturnList.push(filter);\n        }\n      });\n      if (toReturnList.length > 0) {\n        return toReturnList;\n      } else {\n        console.log(\"Filter association not found\");\n      }\n    }\n  };\n\n  this.GetSpecificFixedFilters = function (groupNameOrDashName, query) {\n\n    groupNameandDashNameListForm = groupNameandDashNameListForm.map(function (name) {\n      if (name === \"none\" || typeof name === \"undefined\") {\n        return undefined;\n      } else {\n        return name;\n      }\n    });\n\n    if (Array.isArray(groupNameOrDashName)) {\n      fixedFiltersList.map(function (filter) {\n        if ((filter.dashboard === groupNameOrDashName[0] || filter.groupName === groupNameOrDashName[1]) && filter.query === query) {\n          return filter;\n        }\n      });\n    }\n  };\n\n  this.eliminateFixedFilters = function () {\n    fixedFiltersList = [];\n  };\n\n  this.addfixedFilter = function (groupNameandDashNameListForm, filter) {\n\n    function isFilterAlreadPresent(filterToCheck) {\n      var listToBeChecked = fixedFiltersList;\n      var isPresent = false;\n      for (var i = 0; i < listToBeChecked.length; i++) {\n        if (JSON.stringify(listToBeChecked[i].query) === JSON.stringify(filterToCheck.query)) {\n          isPresent = true;\n        }\n      }\n      return isPresent;\n    }\n\n    groupNameandDashNameListForm = groupNameandDashNameListForm.map(function (name) {\n      if (name === \"none\" || typeof name === \"undefined\") {\n        return undefined;\n      } else {\n        return name;\n      }\n    });\n\n    if (Array.isArray(groupNameandDashNameListForm)) {\n      if (isFilterAlreadPresent(filter)) {\n        return false;\n      }\n      var filterToPush = new fixedFilter(groupNameandDashNameListForm[0], groupNameandDashNameListForm[1], filter.query, filter);\n      fixedFiltersList.push(filterToPush);\n    }\n  };\n\n  this.removeOneFixedFilter = function () {\n    groupNameOrDashNameListForm = groupNameOrDashNameListForm.map(function (name) {\n      if (name === \"none\" || typeof name === \"undefined\") {\n        return undefined;\n      }\n    });\n    if (Array.isArray(groupNameOrDashNameListForm)) {\n      for (var i = 0; i < fixedFiltersList.length; i++) {\n        if ((fixedFiltersList[i].dashboard === groupNameOrDashName[0] || fixedFiltersList.groupName === groupNameOrDashName[1]) && filter.query === query) {\n          array.splice(i, 1);\n        }\n      }\n    }\n  };\n});\n\n// END KP fixedFilter service\n\n\n_module.directive('filterBar', function (Private, Promise, getAppState, fixedFilters, dashboardNavigationState, globalState, $http) {\n  var mapAndFlattenFilters = Private(_map_and_flatten_filters.FilterBarLibMapAndFlattenFiltersProvider);\n  var mapFlattenAndWrapFilters = Private(_map_flatten_and_wrap_filters.FilterBarLibMapFlattenAndWrapFiltersProvider);\n  var extractTimeFilter = Private(_extract_time_filter.FilterBarLibExtractTimeFilterProvider);\n  var filterOutTimeBasedFilter = Private(_filter_out_time_based_filter.FilterBarLibFilterOutTimeBasedFilterProvider);\n  var changeTimeFilter = Private(_change_time_filter.FilterBarLibChangeTimeFilterProvider);\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n\n  return {\n    template: _filter_bar2.default,\n    restrict: 'E',\n    scope: {\n      indexPatterns: '='\n    },\n    link: function link($scope) {\n      // bind query filter actions to the scope\n      ['addFilters', 'toggleFilter', 'toggleAll', 'pinFilter', 'pinAll', 'invertFilter', 'invertAll', 'removeFilter', 'removeAll'].forEach(function (method) {\n        $scope[method] = queryFilter[method];\n      });\n\n      $scope.state = getAppState();\n\n      //KP navigation group\n      var locTag = getAppState().title;\n      if (typeof locTag != \"undefined\") {\n        var navigatedGroup = String(dashboardNavigationState.getNavState().selectedGroup[0][0]).split(\"_\")[0];\n      }\n\n      //END KP navgroup\n\n      //KP repristiner\n\n      function repristinateFixedFiltersAfterDeletingOutOfDashboard(appState, fixedFilters, locationForm) {\n\n        function ChangeAElementToImprobableString(item) {\n          if (typeof item === \"undefined\") {\n            var randomNumericalString = String(Math.floor(Math.random() * 100000000)) + \"notEqualString//!!//\";\n            return randomNumericalString;\n          } else {\n            return item;\n          }\n        }\n\n        function checkIfFixedFilterIsPresentInAppState(fixFilter, filterState) {\n          for (var i = 0; i < filterState.length; i++) {\n            if (JSON.stringify(filterstate[i]) === JSON.stringify(fixFilter.filter)) {\n              return true;\n            }\n          }\n          return false;\n        }\n\n        var savedFiltersList = fixedFilters.getFixedFiltersList();\n        var localFilterState = appState.filters;\n        var globalFilterState = globalState.filters;\n\n        for (var filterIndex = 0; filterIndex < savedFiltersList.length; filterIndex++) {\n          if (!checkIfFixedFilterIsPresentInAppState(localFilterState, savedFiltersList[filterIndex])) {\n            if (typeof appState.filters != \"undefined\") {\n              if (savedFiltersList[filterIndex].dashboard === ChangeAElementToImprobableString(locationForm[0]) || savedFiltersList[filterIndex].groupName === ChangeAElementToImprobableString(locationForm[1])) {\n                setTimeout(appState.filters.push(savedFiltersList[filterIndex].filter), 10);\n              }\n            }\n          }\n        }\n\n        for (var filterIndex = 0; filterIndex < savedFiltersList.length; filterIndex++) {\n          if (!checkIfFixedFilterIsPresentInAppState(globalFilterState, savedFiltersList[filterIndex])) {\n            if (typeof globalState.filters != \"undefined\") {\n              if (savedFiltersList[filterIndex] === ChangeAElementToImprobableString(locationForm[0]).dashboard || savedFiltersList[filterIndex].groupName === ChangeAElementToImprobableString(locationForm[1])) {\n                setTimeout(globalState.filters.push(savedFiltersList[filterIndex].filter), 10);\n              }\n            }\n          }\n        }\n      }\n      //END KP repristiner\n\n      $scope.isAKpformOpen = false;\n\n      $scope.showAddFilterButton = function () {\n        return _lodash2.default.compact($scope.indexPatterns).length > 0;\n      };\n\n      $scope.applyFilters = function (filters) {\n        addAndInvertFilters((0, _filter_applied_and_unwrap.filterAppliedAndUnwrap)(filters));\n        $scope.newFilters = [];\n\n        // change time filter\n        if ($scope.changeTimeFilter && $scope.changeTimeFilter.meta && $scope.changeTimeFilter.meta.apply) {\n          changeTimeFilter($scope.changeTimeFilter);\n        }\n      };\n\n      $scope.addFilter = function () {\n        if (!$scope.isAKpformOpen) {\n          $scope.editingFilter = {\n            meta: { isNew: true }\n          };\n        }\n      };\n\n      $scope.deleteFilter = function (filter) {\n        $scope.removeFilter(filter);\n        if (filter === $scope.editingFilter) $scope.cancelEdit();\n      };\n\n      $scope.editFilter = function (filter) {\n        $scope.editingFilter = filter;\n      };\n\n      $scope.cancelEdit = function () {\n        delete $scope.editingFilter;\n      };\n\n      $scope.saveEdit = function (filter, newFilter, isPinned) {\n        if (!filter.meta.isNew) $scope.removeFilter(filter);\n        delete $scope.editingFilter;\n        $scope.addFilters([newFilter], isPinned);\n      };\n\n      $scope.clearFilterBar = function () {\n        $scope.newFilters = [];a_form_was_opened_or_closed_repeated_down;\n        $scope.changeTimeFilter = null;\n      };\n\n      // update the scope filter list on filter changes\n      $scope.$listen(queryFilter, 'update', function () {\n        updateFilters();\n      });\n\n      // when appState changes, update scope's state\n      $scope.$watch(getAppState, function (appState) {\n        $scope.state = appState;\n      });\n      $scope.$watch('state.$newFilters', function (filters) {\n        if (!filters) return;\n\n        // If filters is not undefined and the length is greater than\n        // one we need to set the newFilters attribute and allow the\n        // users to decide what they want to apply.\n        if (filters.length > 1) {\n          return mapFlattenAndWrapFilters(filters).then(function (results) {\n            extractTimeFilter(results).then(function (filter) {\n              $scope.changeTimeFilter = filter;\n            });\n            return results;\n          }).then(filterOutTimeBasedFilter).then(function (results) {\n            $scope.newFilters = results;\n          });\n        }\n\n        // Just add single filters to the state.\n        if (filters.length === 1) {\n          Promise.resolve(filters).then(function (filters) {\n            extractTimeFilter(filters).then(function (timeFilter) {\n              if (timeFilter) changeTimeFilter(timeFilter);\n            });\n            return filters;\n          }).then(filterOutTimeBasedFilter).then(addAndInvertFilters);\n        }\n      });\n\n      function addAndInvertFilters(filters) {\n        var existingFilters = queryFilter.getFilters();\n        var inversionFilters = _lodash2.default.filter(existingFilters, function (existingFilter) {\n          var newMatchingFilter = _lodash2.default.find(filters, _lodash2.default.partial(_compare_filters.compareFilters));\n          return newMatchingFilter && newMatchingFilter.meta && existingFilter.meta && existingFilter.meta.negate !== newMatchingFilter.meta.negate;\n        });\n        var newFilters = _lodash2.default.reject(filters, function (filter) {\n          return _lodash2.default.find(inversionFilters, _lodash2.default.partial(_compare_filters.compareFilters, filter));\n        });\n\n        _lodash2.default.forEach(inversionFilters, $scope.invertFilter);\n        $scope.addFilters(newFilters);\n      }\n\n      // KP modification function that sets the flag for immutable filters \n\n\n      function CheckIfFiltersExistsInDefaultFixedFilters(filtersFromRepository, filters, dashboardOrGroup, filterservice, dashboardGroupAndName) {\n\n        if (filtersFromRepository === true) {\n          var DefaultFixedFilter = fixedFilters.getDefaultFixedFilters();\n        } else {\n          var DefaultFixedFilter = filtersFromRepository;\n        }\n\n        function extractQueries(Defaultfilters) {\n          var defQueries = [];\n          Defaultfilters.map(function (filter) {\n            if (filter.dashboardName === dashboardOrGroup || filter.groupName === dashboardOrGroup) {\n              defQueries.push(filter.query);\n            }\n          });\n          return defQueries;\n        }\n\n        var queries = extractQueries(DefaultFixedFilter);\n\n        function isTrue(el) {\n          return el === true;\n        }\n\n        function checkJsons(jsonList, json) {\n          return jsonList.map(function (jsON) {\n            if (_lodash2.default.isEqual(jsON, json)) {\n              return true;\n            } else {\n              return false;\n            }\n          }).includes(true);\n        }\n\n        if (queries.map(function (que) {\n          if (typeof que === \"string\") {\n            return true;\n          } else {\n            return false;\n          }\n        }).every(isTrue)) {\n          queries = queries.map(function (que) {\n            return JSON.parse(String(que));\n          });\n        }\n\n        if (filters && queries) {\n          filters.map(function (filterElement) {\n            if (checkJsons(queries, filterElement.query)) {\n              filterElement.meta.fixedFlag = true;\n              filterservice.addfixedFilter([dashboardGroupAndName[0], dashboardGroupAndName[1]], filterElement);\n            } else {\n              filterElement.meta.fixedFlag = false;\n            }\n          });\n        }\n      }\n\n      // END KP modifications\n\n      function updateFilters() {\n\n        var filters = queryFilter.getFilters();\n        var locTag = getAppState().title;\n\n        mapAndFlattenFilters(filters).then(function (results) {\n          // used to display the current filters in the state\n          $scope.filters = _lodash2.default.sortBy(results, function (filter) {\n            return !filter.meta.pinned;\n          });\n          $scope.$emit('filterbar:updated');\n        });\n        //filters.map(function(filter){console.log(JSON.stringify(filter))});\n        setTimeout(CheckIfFiltersExistsInDefaultFixedFilters(true, filters, navigatedGroup, fixedFilters, [undefined, navigatedGroup]), 5);\n\n        //Check if we are in discover and set the fixedFilterFlagAccordingly\n\n        //KP modifications\n        function noFixedFilters() {\n          var filters = queryFilter.getFilters();\n          filters.map(function (filter) {\n            var flag = filter.meta.fixedFlag;\n            if (flag === true) {\n              filter.meta.fixedFlag = !flag;\n            }\n          });\n        }\n        if (typeof locTag == \"undefined\") {\n          noFixedFilters();\n        }\n      }\n\n      updateFilters();\n\n      var locTag = getAppState().title;\n      if (typeof locTag != \"undefined\") {\n        repristinateFixedFiltersAfterDeletingOutOfDashboard($scope.state, fixedFilters, [locTag, navigatedGroup]);\n      }\n\n      // Itercept the form opening event from the dashboard app \\\n      $scope.$on('a_form_was_opened_or_closed_repeated_down', function (event, data) {\n        $scope.isAKpformOpen = data;\n      });\n    }\n  };\n});",null]}