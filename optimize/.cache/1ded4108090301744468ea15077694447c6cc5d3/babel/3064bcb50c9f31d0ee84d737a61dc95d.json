{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_single_filter_bar.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_single_filter_bar.js","mtime":1529067940288},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _kp_custom_single_filter_bar = require('./kp_custom_single_filter_bar.html');\n\nvar _kp_custom_single_filter_bar2 = _interopRequireDefault(_kp_custom_single_filter_bar);\n\nrequire('./style/custom_filters_form.css');\n\nvar _filter_operators = require('../filter_editor/lib/filter_operators');\n\nrequire('angular-ui-select');\n\nrequire('../directives/ui_select_focus_on');\n\nrequire('./kp_custom_params_editor/kp_custom_filter_params_editor');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n//import {getOperatorOptions} from '../filter_editor/lib/filter_editor_utils';\n\n_module.directive('singleFilterBar', function () {\n  return {\n    restrict: 'E',\n    template: _kp_custom_single_filter_bar2.default,\n    scope: {\n      field: '=',\n      params: '='\n    },\n    bindToController: true,\n    controllerAs: 'singlefilter',\n    controller: function singlefiltercontroller($scope, getAppState) {\n\n      var filtersOperators = _filter_operators.FILTER_OPERATORS;\n      filtersOperators = filtersOperators.filter(function (op) {\n        return op.type != \"phrases\";\n      });\n\n      function getOperatorOptions(field) {\n        var type = _lodash2.default.get(field, 'type');\n        return filtersOperators.filter(function (operator) {\n          return !operator.fieldTypes || operator.fieldTypes.includes(type);\n        });\n      }\n\n      $scope.evalField = null;\n      $scope.operatorOptions = null;\n      $scope.operator = null;\n      $scope.params = null;\n      $scope.isPossibleToBuildFilter = false;\n\n      $scope.updateField = function (field) {\n        $scope.evalField = field;\n        $scope.getOperatorOptions(field);\n      };\n\n      $scope.getOperatorOptions = function (field) {\n        var options = getOperatorOptions(field[0]);\n        $scope.operatorOptions = options;\n        return options;\n      };\n\n      $scope.onSelect = function (operator) {\n        $scope.operator = operator;\n      };\n\n      $scope.$on(\"changed_params\", function (event, data) {\n        $scope.params = data;\n      });\n\n      $scope.$watchGroup([\"evalField\", \"operator\", \"params\", \"operator.operator\", \"params.phrase\", \"params.range\", \"params.range.from\", \"params.range.to\"], function (newVal, oldVal) {\n        $scope.elementsForBuildingFilters = null;\n        var fieldAndOperator = $scope.evalField[0] && $scope.operator ? true : false;\n        var isParams = $scope.params ? true : false;\n        var isExist = false;\n        var isTheRangeComplete = false;\n        var isRange = false;\n        if (newVal[1]) {\n          if (newVal[1].operator.type === \"exists\") {\n            isExist = true;\n          }\n        }\n        if (newVal[2] && newVal[2].range) {\n          isRange = true;\n          isTheRangeComplete = newVal[2].range.from && newVal[2].range.to ? true : false;\n        }\n        if (!$scope.elementsForBuildingFilters && !isRange) {\n          if (fieldAndOperator && isParams && newVal[2].phrase != \"\") {\n            $scope.elementsForBuildingFilters = [newVal[0][0], newVal[1].operator, newVal[2]];\n          } else {\n            $scope.elementsForBuildingFilters = null;\n          }\n        }\n\n        if (!$scope.elementsForBuildingFilters) {\n          if (fieldAndOperator && isExist) {\n            $scope.elementsForBuildingFilters = [newVal[0][0], newVal[1].operator];\n          } else {\n            $scope.elementsForBuildingFilters = null;\n          }\n        }\n\n        if (!$scope.elementsForBuildingFilters) {\n          if (fieldAndOperator && isParams && isRange && isTheRangeComplete) {\n            $scope.elementsForBuildingFilters = [newVal[0][0], newVal[1].operator, newVal[2]];\n          } else {\n            $scope.elementsForBuildingFilters = null;\n          }\n        }\n        $scope.elementsForBuildingFilters ? $scope.isPossibleToBuildFilter = true : $scope.isPossibleToBuildFilter = false;\n\n        if ($scope.isPossibleToBuildFilter) {\n          $scope.$emit(\"aFilterCanBeCreated\", $scope.elementsForBuildingFilters);\n        }\n      }, true);\n\n      $scope.stringBool = function (booleanVal) {\n        return String(booleanVal);\n      };\n\n      /* Moved this logic to the custom filter bar component.\n      to enable apply the following \"ng-if = \"isVisibleInThisDashboard(singlefilter.field[1]) || isVisibleInThisGroup(singlefilter.field[1])\"\n       $scope.isVisibleInThisDashboard = (filter) => {\n           var locTag = getAppState().title;                \n           const visibility = filter.filter.visibility.dashboard_name;\n           if(Array.isArray(visibility)){\n               var found = false;    \n               visibility.some(function(dashName){ \n                   if(dashName === locTag){    \n                     found = true;               \n                     return(true)\n                   }\n                })\n             return(found)\n           }\n           else{\n             var found  = (visibility === locTag) ? true : false;\n             return(found)\n           }\n      }\n       $scope.isVisibleInThisGroup = (filter) =>{\n        var locGroup = getAppState().current_group;\n        const groupList = filter.filter.visibility.group_name \n        if(groupList === null){\n             return(true);\n        }\n        else{\n            var found = false;\n            groupList.some(function(groupName){\n               if(groupName === locGroup){\n                 found = true;               \n                 return(true)\n               }\n            })\n            return(found);\n        }        \n      }*/\n    }\n\n  };\n});",null]}