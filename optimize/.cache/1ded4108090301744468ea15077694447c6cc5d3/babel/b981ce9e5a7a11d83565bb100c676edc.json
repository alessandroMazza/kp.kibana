{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_params_editor/kp_custom_filter_params_phrase_controller.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_params_editor/kp_custom_filter_params_phrase_controller.js","mtime":1528984649331},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.kpCustomFilterParamsPhraseController = kpCustomFilterParamsPhraseController;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar baseUrl = _chrome2.default.addBasePath('/api/kibana/suggestions/values');\n\nfunction kpCustomFilterParamsPhraseController($http, $scope, config) {\n  var _this = this;\n\n  $scope.params = {};\n  var deepFieldCopy = jQuery.extend(true, {}, $scope.field);\n  $scope.correctedField = correctAggregatable(deepFieldCopy);\n\n  var filterParamsPhraseEditor = this;\n\n  var shouldSuggestValues = this.shouldSuggestValues = config.get('filterEditor:suggestValues');\n\n  this.compactUnion = _lodash2.default.flow(_lodash2.default.union, _lodash2.default.compact);\n\n  this.getValueSuggestions = _lodash2.default.memoize(getValueSuggestions, getFieldQueryHash);\n\n  this.refreshValueSuggestions = function (query) {\n    return _this.getValueSuggestions($scope.field, query).then(function (suggestions) {\n      $scope.valueSuggestions = suggestions;\n    });\n  };\n\n  this.refreshValueSuggestions();\n\n  function getValueSuggestions(field, query) {\n    if (!shouldSuggestValues || !_lodash2.default.get(field, 'aggregatable') || field.type !== 'string') {\n      return Promise.resolve([]);\n    }\n\n    var params = {\n      query: query,\n      field: field.name\n    };\n\n    /*console.log($http.post(`${baseUrl}/${field.indexPattern.title}`, params)\n    .then(response => response.data)\n    .catch(() => []))*/\n\n    return $http.post(baseUrl + '/' + field.indexPattern.title, params).then(function (response) {\n      return response.data;\n    }).catch(function () {\n      return [];\n    });\n  }\n\n  function getFieldQueryHash(field) {\n    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    return field.indexPattern.id + '/' + field.name + '/' + query;\n  }\n\n  function correctAggregatable(field) {\n    var nameSplit = field.name.split(\".\");\n    var corrField = field;\n    if (!(nameSplit[nameSplit.length - 1] === \"keyword\")) {\n      corrField.aggregatable = false;\n      return corrField;\n    } else {\n      corrField.aggregatable = true;\n      return corrField;\n    }\n  }\n\n  $scope.$watch(function () {\n    return $scope.params.phrase;\n  }, function (newValue, oldValue) {\n    if (!angular.equals(oldValue, newValue)) {\n      $scope.$emit(\"changed_params\", $scope.params);\n    }\n  }, true);\n}",null]}