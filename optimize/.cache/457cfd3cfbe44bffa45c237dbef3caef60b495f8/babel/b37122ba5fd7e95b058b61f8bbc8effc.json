{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_editor.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/kp_custom_filter_group_bar/kp_custom_filter_editor.js","mtime":1529325608256},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _kp_custom_filter_editor = require('./kp_custom_filter_editor.html');\n\nvar _kp_custom_filter_editor2 = _interopRequireDefault(_kp_custom_filter_editor);\n\nrequire('./style/custom_filters_form.css');\n\nvar _kp_custom_filter_Group_utilities = require('./kp_custom_filter_Group_utilities');\n\nrequire('./kp_custom_single_filter_bar');\n\nvar _filter_editor_utils = require('../filter_editor/lib/filter_editor_utils');\n\nrequire('../filter_editor/lib/filter_operators');\n\nvar _lib = require('../filter_manager/lib');\n\nvar filterBuilder = _interopRequireWildcard(_lib);\n\nvar _filter_applied_and_unwrap = require('ui/filter_bar/lib/filter_applied_and_unwrap');\n\nvar _map_and_flatten_filters = require('ui/filter_bar/lib/map_and_flatten_filters');\n\nvar _map_flatten_and_wrap_filters = require('ui/filter_bar/lib/map_flatten_and_wrap_filters');\n\nvar _extract_time_filter = require('ui/filter_bar/lib/extract_time_filter');\n\nvar _filter_out_time_based_filter = require('ui/filter_bar/lib/filter_out_time_based_filter');\n\nvar _change_time_filter = require('ui/filter_bar/lib/change_time_filter');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _compare_filters = require('../filter_bar/lib/compare_filters');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _module = _modules.uiModules.get('kibana');\n_module.directive('kpFilterEditor', function () {\n\n  return {\n    restrict: 'E',\n    template: _kp_custom_filter_editor2.default,\n    scope: {\n      filters: '=',\n      indexPatterns: \"=\"\n    },\n    bindToController: true,\n    controllerAs: 'kpfilters',\n    controller: function kpCustomFiltersController($scope, indexPatterns, Private, globalState) {\n\n      var mapAndFlattenFilters = Private(_map_and_flatten_filters.FilterBarLibMapAndFlattenFiltersProvider);\n      var mapFlattenAndWrapFilters = Private(_map_flatten_and_wrap_filters.FilterBarLibMapFlattenAndWrapFiltersProvider);\n      var extractTimeFilter = Private(_extract_time_filter.FilterBarLibExtractTimeFilterProvider);\n      var filterOutTimeBasedFilter = Private(_filter_out_time_based_filter.FilterBarLibFilterOutTimeBasedFilterProvider);\n      var changeTimeFilter = Private(_change_time_filter.FilterBarLibChangeTimeFilterProvider);\n      var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n\n      ['addFilters', 'toggleFilter', 'toggleAll', 'pinFilter', 'pinAll', 'invertFilter', 'invertAll', 'removeFilter', 'removeAll'].forEach(function (method) {\n        $scope[method] = queryFilter[method];\n      });\n\n      var filterOrganizer = (0, _kp_custom_filter_Group_utilities.filterDataOrganizer)();\n      var thisController = this;\n      this.activeFilterFields = [];\n\n      $scope.selected = false;\n      $scope.onlyOneSelected = false;\n      $scope.nativeEditorOpened = false;\n\n      $scope.$on('is_a_form_open', function (event, data) {\n        $scope.onlyOneSelected = data;\n      });\n\n      $scope.toggle_selected = function (selected, boolVal) {\n        if (!boolVal) {\n          $scope.selected = boolVal;\n          $scope.$emit('a_form_was_opened_or_closed', boolVal);\n        } else if (!$scope.selected && !$scope.onlyOneSelected) {\n          $scope.selected = boolVal;\n          $scope.$emit('a_form_was_opened_or_closed', true);\n        }\n      };\n\n      $scope.indexesIds = null;\n      $scope.indexesTitles = null;\n      $scope.fields = [];\n      $scope.indexPatterns = indexPatterns;\n      $scope.fieldsAndFilters = null;\n      $scope.renderedFilterTag = [];\n      $scope.filterElements = [];\n\n      (function setIdsAndTitles() {\n        indexPatterns.getTitles().then(function (value) {\n          $scope.indexesTitles = value;\n        });\n        indexPatterns.getIds().then(function (value) {\n          $scope.indexesIds = value;\n          value.forEach(function (val) {\n            indexPatterns.get(val).then(function (response) {\n              response.fields.forEach(function (field) {\n                $scope.fields.push(field);\n              });\n            });\n          });\n        });\n      })();\n\n      $scope.flatFields = function (fieldList) {\n        return [].concat.apply([], fieldList);\n      };\n\n      $scope.checkIfPresentAndUpdateFiltersSelection = function (filterName) {\n        var recoveredFieldsList = $scope.flatFields($scope.fields);\n        var nameList = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        });\n        var indexOfField = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        }).indexOf(filterName);\n        if (!(indexOfField >= 0)) {\n          return false;\n        } else {\n          if (!filterOrganizer.jsonInList(recoveredFieldsList[indexOfField], thisController.activeFilterFields)) {\n            thisController.activeFilterFields.push(recoveredFieldsList[indexOfField]);\n          }\n          return true;\n        }\n      };\n\n      $scope.extractFilterNames = function (filterList) {\n        var namelist = filterList.map(function (filter) {\n          return filter.filter.field_name;\n        });\n        return namelist;\n      };\n\n      $scope.findFilterFields = function (filterList) {\n        var recoveredFieldsList = $scope.flatFields($scope.fields);\n        var activeFieldsList = [];\n        var nameList = recoveredFieldsList.map(function (element) {\n          return element.$$spec.name;\n        });\n        filterList.forEach(function (filter) {\n          var filterName = filter.filter.field_name;\n          var indexOfField = nameList.indexOf(filterName);\n          if (indexOfField >= 0) {\n            if (!filterOrganizer.jsonInList(recoveredFieldsList[indexOfField], nameList)) {\n              thisController.activeFilterFields.push(recoveredFieldsList[indexOfField]);\n              activeFieldsList.push([recoveredFieldsList[indexOfField], filter]);\n            }\n          }\n        });\n\n        $scope.fieldsAndFilters = activeFieldsList;\n      };\n\n      $scope.save = function (element) {\n        var field = element[0];\n        var operator = element[1];\n        var params = element[2];\n        var newFilter = void 0;\n        var indexPattern = field.indexPattern;\n        newFilter = (0, _filter_editor_utils.buildFilter)({ indexPattern: indexPattern, field: field, operator: operator, params: params, filterBuilder: filterBuilder });\n        newFilter.meta.disabled = false;\n        var isPinned = false;\n        return $scope.saveEdit(newFilter, isPinned);\n      };\n\n      // Save Filters and check validity for the save button \n\n      $scope.isValid = function (filterList) {\n        var areFiltersValid = [];\n        var returnedVal = false;\n        filterList.forEach(function (filEl) {\n          var field = filEl[0];\n          var operator = filEl[1];\n          var params = filEl[2];\n          areFiltersValid.push((0, _filter_editor_utils.isFilterValid)({ field: field, operator: operator, params: params }));\n        });\n        var uniques = [].concat(_toConsumableArray(new Set(areFiltersValid)));\n        uniques.length === 1 && uniques[0] === true ? returnedVal = true : returnedVal = false;\n        return returnedVal;\n      };\n\n      $scope.saveEdit = function (newFilter, isPinned) {\n        $scope.addFilters([newFilter], isPinned);\n      };\n\n      $scope.saveFilters = function (filterList) {\n        filterList.forEach(function (el) {\n          $scope.save(el);\n        });\n      };\n\n      //Event handlers\n\n      $scope.$on('a_filter_has_been_rendered', function (event, data) {\n        $scope.$broadcast('is_a_form_open', data);\n        $scope.renderedFilterTag.push(data);\n      });\n\n      $scope.$on(\"is_a_native_editor_open_repeated_down\", function (event, data) {\n        $scope.nativeEditorOpened = data;\n      });\n\n      $scope.$on(\"aFilterCanBeCreated\", function (event, data) {\n        $scope.filterElements = (0, _kp_custom_filter_Group_utilities.replaceFilterWithSameFieldOrPush)($scope.filterElements, data, 0);\n      });\n    }\n  };\n});",null]}