{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2/kibana-6.2_TestVersion/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2/kibana-6.2_TestVersion/plugins/elasticsearchGroupIndexService/public/elasticsearchCallController.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2/kibana-6.2_TestVersion/plugins/elasticsearchGroupIndexService/public/elasticsearchCallController.js","mtime":1521040230000},{"path":"/home/mazza/kibana_6.20/kibana-6.2/kibana-6.2_TestVersion/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/mazza/kibana_6.20/kibana-6.2/kibana-6.2_TestVersion/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _elasticsearchCall = require('plugins/elasticsearchGroupIndexService/elasticsearchCall.html');\n\nvar _elasticsearchCall2 = _interopRequireDefault(_elasticsearchCall);\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _schemas2 = _interopRequireDefault(_schemas);\n\nvar _vis_factory = require('ui/vis/vis_factory');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import FilterBarClickHandlerProvider from 'ui/filter_bar/filter_bar_click_handler';\n\nvar _module = require('ui/modules').get('elasticsearchCall', []);\n//import 'plugins/elasticsearchGroupIndexService/elasticsearchCall.css';\n//import optionsTemplate from 'plugins/elasticsearchGroupIndexService/elasticsearchCallOprtions.html';\n\n\n_module.controller('elasticsearchCallCtrl', function ($scope, $http, es, Private) {\n\n  var getGroupfromElasticserch = function getGroupfromElasticserch(indexName, indexType) {\n\n    /* es.search({\n     index: indexName,\n     type:indexType,\n     body: {\n     query: {\n     exists : { field : \"group_Id\" }\n         }\n       }\n     }, \n    function (error, response) {\n    debugger\n    });*/\n\n    var query = {\n      query: {\n        exists: { field: \"group_Id\" }\n      }\n    };\n\n    $http({\n      method: 'POST',\n      url: '../api/console/proxy?path=/_search&method=POST',\n      data: query\n    }).then(function mySuccess(response) {\n      var response = response.data.hits;\n      $scope.resp = response;\n      /*\n      if(response.hits.total > 0){\n        if(!verifyArrays(response)){\n          $scope.reportsShared = [];\n          for(var i=0; i< response.hits.hits.length; i++){\n            $scope.reportsShared.push(response.hits.hits[i]._source);\n          }\n          $scope.$root.$broadcast('alertReports');\n        }\n      }*/\n    }, function myError(response) {});\n  };\n  debugger;\n  //const filterBarClickHandler = Private(FilterBarClickHandlerProvider);  \n  //const queryFilter = Private(require('ui/filter_bar/query_filter'));  \n  $scope.filterBar = Private(_query_filter.FilterBarQueryFilterProvider);\n  debugger;\n\n  getGroupfromElasticserch(\"groups\", \"groupings\");\n});",null]}