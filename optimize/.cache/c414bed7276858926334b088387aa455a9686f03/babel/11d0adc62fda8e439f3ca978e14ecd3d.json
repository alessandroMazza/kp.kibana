{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/filters/comma_list.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/ui/public/filters/comma_list.js","mtime":1526650527911},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _utils = require('../../../utils');\n\n_modules.uiModules.get('kibana').filter('commaList', function () {\n  /**\n   * Angular filter that accepts either an array or a comma-seperated string\n   * and outputs a comma-seperated string for presentation.\n   *\n   * @param {String|Array} input - The comma-seperated list or array\n   * @param {Boolean} inclusive - Should the list be joined with an \"and\"?\n   * @return {String}\n   */\n  return function (input) {\n    var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    return (0, _utils.formatListAsProse)((0, _utils.parseCommaSeparatedList)(input), { inclusive: inclusive });\n  };\n});",null]}