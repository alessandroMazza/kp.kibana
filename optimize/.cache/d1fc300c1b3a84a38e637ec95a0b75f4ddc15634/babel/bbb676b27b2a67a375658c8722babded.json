{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/ui/public/agg_types/buckets/create_filter/ip_range.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/ui/public/agg_types/buckets/create_filter/ip_range.js","mtime":1522422370838},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/cache-loader/dist/cjs.js","mtime":1522422536819},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js","mtime":1522422526854}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.AggTypesBucketsCreateFilterIpRangeProvider = AggTypesBucketsCreateFilterIpRangeProvider;\n\nvar _cidr_mask = require('ui/utils/cidr_mask');\n\nvar _range = require('ui/filter_manager/lib/range');\n\nfunction AggTypesBucketsCreateFilterIpRangeProvider() {\n  return function (aggConfig, key) {\n    var range = void 0;\n    if (aggConfig.params.ipRangeType === 'mask') {\n      range = new _cidr_mask.CidrMask(key).getRange();\n    } else {\n      var _key$split = key.split(/\\s+to\\s+/),\n          _key$split2 = _slicedToArray(_key$split, 2),\n          from = _key$split2[0],\n          to = _key$split2[1];\n\n      range = {\n        from: from === '-Infinity' ? -Infinity : from,\n        to: to === 'Infinity' ? Infinity : to\n      };\n    }\n\n    return (0, _range.buildRangeFilter)(aggConfig.params.field, { gte: range.from, lte: range.to }, aggConfig.vis.indexPattern);\n  };\n}",null]}