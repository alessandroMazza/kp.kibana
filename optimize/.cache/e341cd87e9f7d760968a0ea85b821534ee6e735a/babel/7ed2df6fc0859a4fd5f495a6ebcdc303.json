{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/lib/get_indices.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/lib/get_indices.js","mtime":1526650526934},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/cache-loader/dist/cjs.js","mtime":1526650760833},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Pirelli/node_modules/babel-loader/lib/index.js","mtime":1526650754489}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIndices = undefined;\n\nvar getIndices = exports.getIndices = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(es, rawPattern, limit) {\n    var pattern, params, response, type;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pattern = rawPattern.trim();\n\n            // Searching for `*:` fails for CCS environments. The search request\n            // is worthless anyways as the we should only send a request\n            // for a specific query (where we do not append *) if there is at\n            // least a single character being searched for.\n\n            if (!(pattern === '*:')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt('return', []);\n\n          case 3:\n            if (limit) {\n              _context.next = 5;\n              break;\n            }\n\n            throw '`getIndices()` was called without the required `limit` parameter.';\n\n          case 5:\n            params = {\n              index: pattern,\n              ignore: [404],\n              body: {\n                size: 0, // no hits\n                aggs: {\n                  indices: {\n                    terms: {\n                      field: '_index',\n                      size: limit\n                    }\n                  }\n                }\n              }\n            };\n            _context.prev = 6;\n            _context.next = 9;\n            return es.search(params);\n\n          case 9:\n            response = _context.sent;\n\n            if (!(!response || response.error || !response.aggregations)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt('return', []);\n\n          case 12:\n            return _context.abrupt('return', (0, _lodash.sortBy)(response.aggregations.indices.buckets.map(function (bucket) {\n              return {\n                name: bucket.key\n              };\n            }), 'name'));\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context['catch'](6);\n            type = (0, _lodash.get)(_context.t0, 'body.error.caused_by.type');\n\n            if (!(type === 'index_not_found_exception')) {\n              _context.next = 20;\n              break;\n            }\n\n            return _context.abrupt('return', []);\n\n          case 20:\n            throw _context.t0;\n\n          case 21:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[6, 15]]);\n  }));\n\n  return function getIndices(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _lodash = require('lodash');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }",null]}