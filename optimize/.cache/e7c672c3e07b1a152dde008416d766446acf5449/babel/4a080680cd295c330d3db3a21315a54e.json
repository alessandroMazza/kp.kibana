{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/ui/public/courier/fetch/continue_incomplete.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/ui/public/courier/fetch/continue_incomplete.js","mtime":1522422371238},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/cache-loader/dist/cjs.js","mtime":1522422536819},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js","mtime":1522422526854}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContinueIncompleteProvider = ContinueIncompleteProvider;\n\nvar _req_status = require('./req_status');\n\nfunction ContinueIncompleteProvider() {\n  var INCOMPLETE = _req_status.RequestStatus.INCOMPLETE;\n\n  function continueIncompleteRequests(requests, responses, fetchSearchResults) {\n    var incomplete = [];\n\n    responses.forEach(function (resp, i) {\n      if (resp === INCOMPLETE) {\n        incomplete.push(requests[i]);\n      }\n    });\n\n    if (!incomplete.length) return responses;\n\n    return fetchSearchResults(incomplete).then(function (completedResponses) {\n      return responses.map(function (prevResponse) {\n        if (prevResponse !== INCOMPLETE) return prevResponse;\n        return completedResponses.shift();\n      });\n    });\n  }\n\n  return continueIncompleteRequests;\n}",null]}