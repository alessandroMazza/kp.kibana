{"remainingRequest":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js??ref--6-1!/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/utils/strings/prose.js","dependencies":[{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/src/utils/strings/prose.js","mtime":1522422368698},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/cache-loader/dist/cjs.js","mtime":1522422536819},{"path":"/home/mazza/kibana_6.20/kibana-6.2_Mediamarket/node_modules/babel-loader/lib/index.js","mtime":1522422526854}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatListAsProse = formatListAsProse;\n/**\n *  Converts an array of items into a sentence-ready string.\n *\n *  @param {Array<any>} list\n *  @param {Object} [options={}]\n *  @property {Boolean} [options.inclusive=true] Creates an inclusive list using \"and\"\n *                                               when `true` (default), otherwise uses \"or\"\n *  @return {String}\n */\nfunction formatListAsProse(list) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$inclusive = options.inclusive,\n      inclusive = _options$inclusive === undefined ? true : _options$inclusive;\n\n\n  if (!Array.isArray(list)) {\n    throw new TypeError('formatListAsProse() requires an array');\n  }\n\n  var count = list.length;\n  var conjunction = inclusive ? 'and' : 'or';\n\n  if (count <= 2) {\n    return list.join(' ' + conjunction + ' ');\n  }\n\n  return list.slice(0, -1).concat(conjunction + ' ' + list[count - 1]).join(', ');\n}",null]}